/**
 */
package dsml.impl;

import dsml.Component;
import dsml.DsmlPackage;
import dsml.LinkTarget;
import dsml.Target;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Link Target</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link dsml.impl.LinkTargetImpl#getOutboundLink <em>Outbound Link</em>}</li>
 *   <li>{@link dsml.impl.LinkTargetImpl#getInboundLink <em>Inbound Link</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class LinkTargetImpl extends LinkImpl implements LinkTarget {
	/**
	 * The cached value of the '{@link #getOutboundLink() <em>Outbound Link</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOutboundLink()
	 * @generated
	 * @ordered
	 */
	protected Component outboundLink;

	/**
	 * The cached value of the '{@link #getInboundLink() <em>Inbound Link</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getInboundLink()
	 * @generated
	 * @ordered
	 */
	protected EList<Target> inboundLink;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkTargetImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return DsmlPackage.Literals.LINK_TARGET;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Component getOutboundLink() {
		if (outboundLink != null && outboundLink.eIsProxy()) {
			InternalEObject oldOutboundLink = (InternalEObject)outboundLink;
			outboundLink = (Component)eResolveProxy(oldOutboundLink);
			if (outboundLink != oldOutboundLink) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, DsmlPackage.LINK_TARGET__OUTBOUND_LINK, oldOutboundLink, outboundLink));
			}
		}
		return outboundLink;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Component basicGetOutboundLink() {
		return outboundLink;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setOutboundLink(Component newOutboundLink) {
		Component oldOutboundLink = outboundLink;
		outboundLink = newOutboundLink;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DsmlPackage.LINK_TARGET__OUTBOUND_LINK, oldOutboundLink, outboundLink));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Target> getInboundLink() {
		if (inboundLink == null) {
			inboundLink = new EObjectResolvingEList<Target>(Target.class, this, DsmlPackage.LINK_TARGET__INBOUND_LINK);
		}
		return inboundLink;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case DsmlPackage.LINK_TARGET__OUTBOUND_LINK:
				if (resolve) return getOutboundLink();
				return basicGetOutboundLink();
			case DsmlPackage.LINK_TARGET__INBOUND_LINK:
				return getInboundLink();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case DsmlPackage.LINK_TARGET__OUTBOUND_LINK:
				setOutboundLink((Component)newValue);
				return;
			case DsmlPackage.LINK_TARGET__INBOUND_LINK:
				getInboundLink().clear();
				getInboundLink().addAll((Collection<? extends Target>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case DsmlPackage.LINK_TARGET__OUTBOUND_LINK:
				setOutboundLink((Component)null);
				return;
			case DsmlPackage.LINK_TARGET__INBOUND_LINK:
				getInboundLink().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case DsmlPackage.LINK_TARGET__OUTBOUND_LINK:
				return outboundLink != null;
			case DsmlPackage.LINK_TARGET__INBOUND_LINK:
				return inboundLink != null && !inboundLink.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //LinkTargetImpl
