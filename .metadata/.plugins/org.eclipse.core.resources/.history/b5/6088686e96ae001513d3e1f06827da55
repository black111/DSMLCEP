/*
 * 
 */
package dsml.diagram.edit.policies;

import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;

import dsml.diagram.edit.commands.AggregationCreateCommand;
import dsml.diagram.edit.commands.AttributeCreateCommand;
import dsml.diagram.edit.commands.BinaryOperatorPatternCreateCommand;
import dsml.diagram.edit.commands.ConditionGroupCreateCommand;
import dsml.diagram.edit.commands.EventCreateCommand;
import dsml.diagram.edit.commands.EventPatternCreateCommand;
import dsml.diagram.edit.commands.NotCreateCommand;
import dsml.diagram.edit.commands.OperatorCreateCommand;
import dsml.diagram.edit.commands.OrderCreateCommand;
import dsml.diagram.edit.commands.PatternTimerCreateCommand;
import dsml.diagram.edit.commands.RuleCreateCommand;
import dsml.diagram.edit.commands.TargetCreateCommand;
import dsml.diagram.edit.commands.UnaryOperatorPatternCreateCommand;
import dsml.diagram.edit.commands.ValueOperatorCreateCommand;
import dsml.diagram.edit.commands.WindowCreateCommand;
import dsml.diagram.providers.DsmlElementTypes;

/**
 * @generated
 */
public class AreaDesenhoItemSemanticEditPolicy extends
		DsmlBaseItemSemanticEditPolicy {

	/**
	 * @generated
	 */
	public AreaDesenhoItemSemanticEditPolicy() {
		super(DsmlElementTypes.AreaDesenho_1000);
	}

	/**
	 * @generated
	 */
	protected Command getCreateCommand(CreateElementRequest req) {
		if (DsmlElementTypes.Aggregation_2017 == req.getElementType()) {
			return getGEFWrapper(new AggregationCreateCommand(req));
		}
		if (DsmlElementTypes.Order_2018 == req.getElementType()) {
			return getGEFWrapper(new OrderCreateCommand(req));
		}
		if (DsmlElementTypes.Operator_2019 == req.getElementType()) {
			return getGEFWrapper(new OperatorCreateCommand(req));
		}
		if (DsmlElementTypes.ValueOperator_2020 == req.getElementType()) {
			return getGEFWrapper(new ValueOperatorCreateCommand(req));
		}
		if (DsmlElementTypes.UnaryOperatorPattern_2021 == req.getElementType()) {
			return getGEFWrapper(new UnaryOperatorPatternCreateCommand(req));
		}
		if (DsmlElementTypes.BinaryOperatorPattern_2022 == req.getElementType()) {
			return getGEFWrapper(new BinaryOperatorPatternCreateCommand(req));
		}
		if (DsmlElementTypes.PatternTimer_2023 == req.getElementType()) {
			return getGEFWrapper(new PatternTimerCreateCommand(req));
		}
		if (DsmlElementTypes.Attribute_2027 == req.getElementType()) {
			return getGEFWrapper(new AttributeCreateCommand(req));
		}
		if (DsmlElementTypes.ConditionGroup_2024 == req.getElementType()) {
			return getGEFWrapper(new ConditionGroupCreateCommand(req));
		}
		if (DsmlElementTypes.Target_2026 == req.getElementType()) {
			return getGEFWrapper(new TargetCreateCommand(req));
		}
		if (DsmlElementTypes.Not_2025 == req.getElementType()) {
			return getGEFWrapper(new NotCreateCommand(req));
		}
		if (DsmlElementTypes.Rule_2013 == req.getElementType()) {
			return getGEFWrapper(new RuleCreateCommand(req));
		}
		if (DsmlElementTypes.EventPattern_2014 == req.getElementType()) {
			return getGEFWrapper(new EventPatternCreateCommand(req));
		}
		if (DsmlElementTypes.Window_2015 == req.getElementType()) {
			return getGEFWrapper(new WindowCreateCommand(req));
		}
		if (DsmlElementTypes.Event_2016 == req.getElementType()) {
			return getGEFWrapper(new EventCreateCommand(req));
		}
		return super.getCreateCommand(req);
	}

	/**
	 * @generated
	 */
	protected Command getDuplicateCommand(DuplicateElementsRequest req) {
		TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
				.getEditingDomain();
		return getGEFWrapper(new DuplicateAnythingCommand(editingDomain, req));
	}

	/**
	 * @generated
	 */
	private static class DuplicateAnythingCommand extends
			DuplicateEObjectsCommand {

		/**
		 * @generated
		 */
		public DuplicateAnythingCommand(
				TransactionalEditingDomain editingDomain,
				DuplicateElementsRequest req) {
			super(editingDomain, req.getLabel(), req
					.getElementsToBeDuplicated(), req
					.getAllDuplicatedElementsMap());
		}

	}

}
