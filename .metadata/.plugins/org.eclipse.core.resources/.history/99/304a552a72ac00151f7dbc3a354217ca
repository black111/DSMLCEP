/*
 * 
 */
package dsml.diagram.part;

import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.tooling.runtime.structure.DiagramStructure;

import dsml.AreaDesenho;
import dsml.DsmlPackage;
import dsml.diagram.edit.parts.*;

/**
 * This registry is used to determine which type of visual object should be
 * created for the corresponding Diagram, Node, ChildNode or Link represented
 * by a domain model object.
 * 
 * @generated
 */
public class DsmlVisualIDRegistry {

	/**
	 * @generated
	 */
	private static final String DEBUG_KEY = "br.ufpe.cin.dsml.cep.diagram/debug/visualID"; //$NON-NLS-1$

	/**
	 * @generated
	 */
	public static int getVisualID(View view) {
		if (view instanceof Diagram) {
			if (AreaDesenhoEditPart.MODEL_ID.equals(view.getType())) {
				return AreaDesenhoEditPart.VISUAL_ID;
			} else {
				return -1;
			}
		}
		return dsml.diagram.part.DsmlVisualIDRegistry.getVisualID(view
				.getType());
	}

	/**
	 * @generated
	 */
	public static String getModelID(View view) {
		View diagram = view.getDiagram();
		while (view != diagram) {
			EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
			if (annotation != null) {
				return (String) annotation.getDetails().get("modelID"); //$NON-NLS-1$
			}
			view = (View) view.eContainer();
		}
		return diagram != null ? diagram.getType() : null;
	}

	/**
	 * @generated
	 */
	public static int getVisualID(String type) {
		try {
			return Integer.parseInt(type);
		} catch (NumberFormatException e) {
			if (Boolean.TRUE.toString().equalsIgnoreCase(
					Platform.getDebugOption(DEBUG_KEY))) {
				DsmlDiagramEditorPlugin.getInstance().logError(
						"Unable to parse view type as a visualID number: "
								+ type);
			}
		}
		return -1;
	}

	/**
	 * @generated
	 */
	public static String getType(int visualID) {
		return Integer.toString(visualID);
	}

	/**
	 * @generated
	 */
	public static int getDiagramVisualID(EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		if (DsmlPackage.eINSTANCE.getAreaDesenho().isSuperTypeOf(
				domainElement.eClass())
				&& isDiagram((AreaDesenho) domainElement)) {
			return AreaDesenhoEditPart.VISUAL_ID;
		}
		return -1;
	}

	/**
	 * @generated
	 */
	public static int getNodeVisualID(View containerView, EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		String containerModelID = dsml.diagram.part.DsmlVisualIDRegistry
				.getModelID(containerView);
		if (!AreaDesenhoEditPart.MODEL_ID.equals(containerModelID)
				&& !"dsml".equals(containerModelID)) { //$NON-NLS-1$
			return -1;
		}
		int containerVisualID;
		if (AreaDesenhoEditPart.MODEL_ID.equals(containerModelID)) {
			containerVisualID = dsml.diagram.part.DsmlVisualIDRegistry
					.getVisualID(containerView);
		} else {
			if (containerView instanceof Diagram) {
				containerVisualID = AreaDesenhoEditPart.VISUAL_ID;
			} else {
				return -1;
			}
		}
		switch (containerVisualID) {
		case AreaDesenhoEditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getAggregation().isSuperTypeOf(
					domainElement.eClass())) {
				return AggregationEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOrder().isSuperTypeOf(
					domainElement.eClass())) {
				return OrderEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return OperatorEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperatorEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getUnaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return UnaryOperatorPatternEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getBinaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return BinaryOperatorPatternEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getPatternTimer().isSuperTypeOf(
					domainElement.eClass())) {
				return PatternTimerEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getConditionGroup().isSuperTypeOf(
					domainElement.eClass())) {
				return ConditionGroupEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getTarget().isSuperTypeOf(
					domainElement.eClass())) {
				return TargetEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getNot().isSuperTypeOf(
					domainElement.eClass())) {
				return NotEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getRule().isSuperTypeOf(
					domainElement.eClass())) {
				return RuleEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getEventPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return EventPatternEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getWindow().isSuperTypeOf(
					domainElement.eClass())) {
				return WindowEditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getEvent().isSuperTypeOf(
					domainElement.eClass())) {
				return EventEditPart.VISUAL_ID;
			}
			break;
		case OrderOrderLimitCompartmentEditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getLimit().isSuperTypeOf(
					domainElement.eClass())) {
				return LimitEditPart.VISUAL_ID;
			}
			break;
		case ConditionGroupConditionGroupOperationTypesCompartmentEditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator2EditPart.VISUAL_ID;
			}
			break;
		case TargetTargetNodesCompartmentEditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getAggregation().isSuperTypeOf(
					domainElement.eClass())) {
				return Aggregation2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOrder().isSuperTypeOf(
					domainElement.eClass())) {
				return Order2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getUnaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return UnaryOperatorPattern2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getBinaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return BinaryOperatorPattern2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getPatternTimer().isSuperTypeOf(
					domainElement.eClass())) {
				return PatternTimer2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getConditionGroup().isSuperTypeOf(
					domainElement.eClass())) {
				return ConditionGroup2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getTarget().isSuperTypeOf(
					domainElement.eClass())) {
				return Target2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getNot().isSuperTypeOf(
					domainElement.eClass())) {
				return Not2EditPart.VISUAL_ID;
			}
			break;
		case OrderOrderLimitCompartment2EditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getLimit().isSuperTypeOf(
					domainElement.eClass())) {
				return LimitEditPart.VISUAL_ID;
			}
			break;
		case ConditionGroupConditionGroupOperationTypesCompartment2EditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator2EditPart.VISUAL_ID;
			}
			break;
		case TargetTargetNodesCompartment2EditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getAggregation().isSuperTypeOf(
					domainElement.eClass())) {
				return Aggregation2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOrder().isSuperTypeOf(
					domainElement.eClass())) {
				return Order2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getUnaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return UnaryOperatorPattern2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getBinaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return BinaryOperatorPattern2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getPatternTimer().isSuperTypeOf(
					domainElement.eClass())) {
				return PatternTimer2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getConditionGroup().isSuperTypeOf(
					domainElement.eClass())) {
				return ConditionGroup2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getTarget().isSuperTypeOf(
					domainElement.eClass())) {
				return Target2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getNot().isSuperTypeOf(
					domainElement.eClass())) {
				return Not2EditPart.VISUAL_ID;
			}
			break;
		case RuleRuleNodeCompartmentEditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getAggregation().isSuperTypeOf(
					domainElement.eClass())) {
				return Aggregation3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOrder().isSuperTypeOf(
					domainElement.eClass())) {
				return Order3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator4EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator4EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getUnaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return UnaryOperatorPattern3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getBinaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return BinaryOperatorPattern3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getPatternTimer().isSuperTypeOf(
					domainElement.eClass())) {
				return PatternTimer3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getConditionGroup().isSuperTypeOf(
					domainElement.eClass())) {
				return ConditionGroup3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getTarget().isSuperTypeOf(
					domainElement.eClass())) {
				return Target3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getNot().isSuperTypeOf(
					domainElement.eClass())) {
				return Not3EditPart.VISUAL_ID;
			}
			break;
		case OrderOrderLimitCompartment3EditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getLimit().isSuperTypeOf(
					domainElement.eClass())) {
				return LimitEditPart.VISUAL_ID;
			}
			break;
		case ConditionGroupConditionGroupOperationTypesCompartment3EditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator2EditPart.VISUAL_ID;
			}
			break;
		case TargetTargetNodesCompartment3EditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getAggregation().isSuperTypeOf(
					domainElement.eClass())) {
				return Aggregation2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOrder().isSuperTypeOf(
					domainElement.eClass())) {
				return Order2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getUnaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return UnaryOperatorPattern2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getBinaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return BinaryOperatorPattern2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getPatternTimer().isSuperTypeOf(
					domainElement.eClass())) {
				return PatternTimer2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getConditionGroup().isSuperTypeOf(
					domainElement.eClass())) {
				return ConditionGroup2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getTarget().isSuperTypeOf(
					domainElement.eClass())) {
				return Target2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getNot().isSuperTypeOf(
					domainElement.eClass())) {
				return Not2EditPart.VISUAL_ID;
			}
			break;
		case EventPatternEventPatternNodeCompartmentEditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getAggregation().isSuperTypeOf(
					domainElement.eClass())) {
				return Aggregation4EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOrder().isSuperTypeOf(
					domainElement.eClass())) {
				return Order4EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator5EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator5EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getUnaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return UnaryOperatorPattern4EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getBinaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return BinaryOperatorPattern4EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getPatternTimer().isSuperTypeOf(
					domainElement.eClass())) {
				return PatternTimer4EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getConditionGroup().isSuperTypeOf(
					domainElement.eClass())) {
				return ConditionGroup4EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getTarget().isSuperTypeOf(
					domainElement.eClass())) {
				return Target4EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getNot().isSuperTypeOf(
					domainElement.eClass())) {
				return Not4EditPart.VISUAL_ID;
			}
			break;
		case OrderOrderLimitCompartment4EditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getLimit().isSuperTypeOf(
					domainElement.eClass())) {
				return LimitEditPart.VISUAL_ID;
			}
			break;
		case ConditionGroupConditionGroupOperationTypesCompartment4EditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator2EditPart.VISUAL_ID;
			}
			break;
		case TargetTargetNodesCompartment4EditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getAggregation().isSuperTypeOf(
					domainElement.eClass())) {
				return Aggregation2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOrder().isSuperTypeOf(
					domainElement.eClass())) {
				return Order2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return Operator3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getValueOperator().isSuperTypeOf(
					domainElement.eClass())) {
				return ValueOperator3EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getUnaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return UnaryOperatorPattern2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getBinaryOperatorPattern().isSuperTypeOf(
					domainElement.eClass())) {
				return BinaryOperatorPattern2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getPatternTimer().isSuperTypeOf(
					domainElement.eClass())) {
				return PatternTimer2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getConditionGroup().isSuperTypeOf(
					domainElement.eClass())) {
				return ConditionGroup2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getTarget().isSuperTypeOf(
					domainElement.eClass())) {
				return Target2EditPart.VISUAL_ID;
			}
			if (DsmlPackage.eINSTANCE.getNot().isSuperTypeOf(
					domainElement.eClass())) {
				return Not2EditPart.VISUAL_ID;
			}
			break;
		case EventEventAttributesCompartmentEditPart.VISUAL_ID:
			if (DsmlPackage.eINSTANCE.getAttribute().isSuperTypeOf(
					domainElement.eClass())) {
				return AttributeEditPart.VISUAL_ID;
			}
			break;
		}
		return -1;
	}

	/**
	 * @generated
	 */
	public static boolean canCreateNode(View containerView, int nodeVisualID) {
		String containerModelID = dsml.diagram.part.DsmlVisualIDRegistry
				.getModelID(containerView);
		if (!AreaDesenhoEditPart.MODEL_ID.equals(containerModelID)
				&& !"dsml".equals(containerModelID)) { //$NON-NLS-1$
			return false;
		}
		int containerVisualID;
		if (AreaDesenhoEditPart.MODEL_ID.equals(containerModelID)) {
			containerVisualID = dsml.diagram.part.DsmlVisualIDRegistry
					.getVisualID(containerView);
		} else {
			if (containerView instanceof Diagram) {
				containerVisualID = AreaDesenhoEditPart.VISUAL_ID;
			} else {
				return false;
			}
		}
		switch (containerVisualID) {
		case AreaDesenhoEditPart.VISUAL_ID:
			if (AggregationEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (OrderEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (OperatorEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperatorEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (UnaryOperatorPatternEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (BinaryOperatorPatternEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PatternTimerEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroupEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (TargetEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (NotEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RuleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EventPatternEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (WindowEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EventEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case AggregationEditPart.VISUAL_ID:
			if (AggregationTypeAggregationEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case OrderEditPart.VISUAL_ID:
			if (OrderTypeOrderEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (OrderOrderLimitCompartmentEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case OperatorEditPart.VISUAL_ID:
			if (OperatorOperatorEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ValueOperatorEditPart.VISUAL_ID:
			if (ValueOperatorValueOperatorEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case UnaryOperatorPatternEditPart.VISUAL_ID:
			if (UnaryOperatorPatternNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case BinaryOperatorPatternEditPart.VISUAL_ID:
			if (BinaryOperatorPatternNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case PatternTimerEditPart.VISUAL_ID:
			if (PatternTimerPatternTimerEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ConditionGroupEditPart.VISUAL_ID:
			if (ConditionGroupConditionGroupEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroupConditionGroupOperationTypesCompartmentEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case TargetEditPart.VISUAL_ID:
			if (TargetTargetEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (TargetTargetNodesCompartmentEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case NotEditPart.VISUAL_ID:
			if (NotDescriptionEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case RuleEditPart.VISUAL_ID:
			if (RuleRuleNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RuleRuleNodeCompartmentEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case EventPatternEditPart.VISUAL_ID:
			if (EventPatternEventPatternEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EventPatternEventPatternNodeCompartmentEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case WindowEditPart.VISUAL_ID:
			if (WindowWindowEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case EventEditPart.VISUAL_ID:
			if (EventEventNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EventEventAttributesCompartmentEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case LimitEditPart.VISUAL_ID:
			if (LimitValueLimitEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Operator2EditPart.VISUAL_ID:
			if (OperatorOperator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ValueOperator2EditPart.VISUAL_ID:
			if (ValueOperatorValueOperator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Aggregation2EditPart.VISUAL_ID:
			if (AggregationTypeAggregation2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Order2EditPart.VISUAL_ID:
			if (OrderTypeOrder2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (OrderOrderLimitCompartment2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Operator3EditPart.VISUAL_ID:
			if (OperatorOperator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ValueOperator3EditPart.VISUAL_ID:
			if (ValueOperatorValueOperator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case UnaryOperatorPattern2EditPart.VISUAL_ID:
			if (UnaryOperatorPatternName2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case BinaryOperatorPattern2EditPart.VISUAL_ID:
			if (BinaryOperatorPatternName2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case PatternTimer2EditPart.VISUAL_ID:
			if (PatternTimerPatternTimer2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ConditionGroup2EditPart.VISUAL_ID:
			if (ConditionGroupConditionGroup2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroupConditionGroupOperationTypesCompartment2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Target2EditPart.VISUAL_ID:
			if (TargetTarget2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (TargetTargetNodesCompartment2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Not2EditPart.VISUAL_ID:
			if (NotDescription2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Aggregation3EditPart.VISUAL_ID:
			if (AggregationTypeAggregation3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Order3EditPart.VISUAL_ID:
			if (OrderTypeOrder3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (OrderOrderLimitCompartment3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Operator4EditPart.VISUAL_ID:
			if (OperatorOperator4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ValueOperator4EditPart.VISUAL_ID:
			if (ValueOperatorValueOperator4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case UnaryOperatorPattern3EditPart.VISUAL_ID:
			if (UnaryOperatorPatternName3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case BinaryOperatorPattern3EditPart.VISUAL_ID:
			if (BinaryOperatorPatternName3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case PatternTimer3EditPart.VISUAL_ID:
			if (PatternTimerPatternTimer3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ConditionGroup3EditPart.VISUAL_ID:
			if (ConditionGroupConditionGroup3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroupConditionGroupOperationTypesCompartment3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Target3EditPart.VISUAL_ID:
			if (TargetTarget3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (TargetTargetNodesCompartment3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Not3EditPart.VISUAL_ID:
			if (NotDescription3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Aggregation4EditPart.VISUAL_ID:
			if (AggregationTypeAggregation4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Order4EditPart.VISUAL_ID:
			if (OrderTypeOrder4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (OrderOrderLimitCompartment4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Operator5EditPart.VISUAL_ID:
			if (OperatorOperator5EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ValueOperator5EditPart.VISUAL_ID:
			if (ValueOperatorValueOperator5EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case UnaryOperatorPattern4EditPart.VISUAL_ID:
			if (UnaryOperatorPatternName4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case BinaryOperatorPattern4EditPart.VISUAL_ID:
			if (BinaryOperatorPatternName4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case PatternTimer4EditPart.VISUAL_ID:
			if (PatternTimerPatternTimer4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ConditionGroup4EditPart.VISUAL_ID:
			if (ConditionGroupConditionGroup4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroupConditionGroupOperationTypesCompartment4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Target4EditPart.VISUAL_ID:
			if (TargetTarget4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (TargetTargetNodesCompartment4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Not4EditPart.VISUAL_ID:
			if (NotDescription4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case AttributeEditPart.VISUAL_ID:
			if (AttributeNameTypeEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case OrderOrderLimitCompartmentEditPart.VISUAL_ID:
			if (LimitEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ConditionGroupConditionGroupOperationTypesCompartmentEditPart.VISUAL_ID:
			if (Operator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case TargetTargetNodesCompartmentEditPart.VISUAL_ID:
			if (Aggregation2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Order2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Operator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (UnaryOperatorPattern2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (BinaryOperatorPattern2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PatternTimer2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroup2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Target2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Not2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case OrderOrderLimitCompartment2EditPart.VISUAL_ID:
			if (LimitEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ConditionGroupConditionGroupOperationTypesCompartment2EditPart.VISUAL_ID:
			if (Operator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case TargetTargetNodesCompartment2EditPart.VISUAL_ID:
			if (Aggregation2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Order2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Operator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (UnaryOperatorPattern2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (BinaryOperatorPattern2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PatternTimer2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroup2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Target2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Not2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case RuleRuleNodeCompartmentEditPart.VISUAL_ID:
			if (Aggregation3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Order3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Operator4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (UnaryOperatorPattern3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (BinaryOperatorPattern3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PatternTimer3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroup3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Target3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Not3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case OrderOrderLimitCompartment3EditPart.VISUAL_ID:
			if (LimitEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ConditionGroupConditionGroupOperationTypesCompartment3EditPart.VISUAL_ID:
			if (Operator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case TargetTargetNodesCompartment3EditPart.VISUAL_ID:
			if (Aggregation2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Order2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Operator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (UnaryOperatorPattern2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (BinaryOperatorPattern2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PatternTimer2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroup2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Target2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Not2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case EventPatternEventPatternNodeCompartmentEditPart.VISUAL_ID:
			if (Aggregation4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Order4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Operator5EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator5EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (UnaryOperatorPattern4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (BinaryOperatorPattern4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PatternTimer4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroup4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Target4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Not4EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case OrderOrderLimitCompartment4EditPart.VISUAL_ID:
			if (LimitEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ConditionGroupConditionGroupOperationTypesCompartment4EditPart.VISUAL_ID:
			if (Operator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case TargetTargetNodesCompartment4EditPart.VISUAL_ID:
			if (Aggregation2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Order2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Operator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ValueOperator3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (UnaryOperatorPattern2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (BinaryOperatorPattern2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PatternTimer2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConditionGroup2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Target2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Not2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case EventEventAttributesCompartmentEditPart.VISUAL_ID:
			if (AttributeEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ComparisonEditPart.VISUAL_ID:
			if (ComparisonComparisonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ArithmeticEditPart.VISUAL_ID:
			if (ArithmeticArithmeticEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case LogicalConnectorEditPart.VISUAL_ID:
			if (LogicalConnectorTypeLogicalEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		}
		return false;
	}

	/**
	 * @generated
	 */
	public static int getLinkWithClassVisualID(EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		if (DsmlPackage.eINSTANCE.getLink().isSuperTypeOf(
				domainElement.eClass())) {
			return LinkEditPart.VISUAL_ID;
		}
		if (DsmlPackage.eINSTANCE.getComparison().isSuperTypeOf(
				domainElement.eClass())) {
			return ComparisonEditPart.VISUAL_ID;
		}
		if (DsmlPackage.eINSTANCE.getArithmetic().isSuperTypeOf(
				domainElement.eClass())) {
			return ArithmeticEditPart.VISUAL_ID;
		}
		if (DsmlPackage.eINSTANCE.getFollowedby().isSuperTypeOf(
				domainElement.eClass())) {
			return FollowedbyEditPart.VISUAL_ID;
		}
		if (DsmlPackage.eINSTANCE.getLogicalConnector().isSuperTypeOf(
				domainElement.eClass())) {
			return LogicalConnectorEditPart.VISUAL_ID;
		}
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 * 
	 * @generated
	 */
	private static boolean isDiagram(AreaDesenho element) {
		return true;
	}

	/**
	 * @generated
	 */
	public static boolean checkNodeVisualID(View containerView,
			EObject domainElement, int candidate) {
		if (candidate == -1) {
			//unrecognized id is always bad
			return false;
		}
		int basic = getNodeVisualID(containerView, domainElement);
		return basic == candidate;
	}

	/**
	 * @generated
	 */
	public static boolean isCompartmentVisualID(int visualID) {
		switch (visualID) {
		case OrderOrderLimitCompartmentEditPart.VISUAL_ID:
		case ConditionGroupConditionGroupOperationTypesCompartmentEditPart.VISUAL_ID:
		case TargetTargetNodesCompartmentEditPart.VISUAL_ID:
		case OrderOrderLimitCompartment2EditPart.VISUAL_ID:
		case ConditionGroupConditionGroupOperationTypesCompartment2EditPart.VISUAL_ID:
		case TargetTargetNodesCompartment2EditPart.VISUAL_ID:
		case RuleRuleNodeCompartmentEditPart.VISUAL_ID:
		case OrderOrderLimitCompartment3EditPart.VISUAL_ID:
		case ConditionGroupConditionGroupOperationTypesCompartment3EditPart.VISUAL_ID:
		case TargetTargetNodesCompartment3EditPart.VISUAL_ID:
		case EventPatternEventPatternNodeCompartmentEditPart.VISUAL_ID:
		case OrderOrderLimitCompartment4EditPart.VISUAL_ID:
		case ConditionGroupConditionGroupOperationTypesCompartment4EditPart.VISUAL_ID:
		case TargetTargetNodesCompartment4EditPart.VISUAL_ID:
		case EventEventAttributesCompartmentEditPart.VISUAL_ID:
			return true;
		default:
			break;
		}
		return false;
	}

	/**
	 * @generated
	 */
	public static boolean isSemanticLeafVisualID(int visualID) {
		switch (visualID) {
		case AreaDesenhoEditPart.VISUAL_ID:
			return false;
		case WindowEditPart.VISUAL_ID:
		case AggregationEditPart.VISUAL_ID:
		case OperatorEditPart.VISUAL_ID:
		case ValueOperatorEditPart.VISUAL_ID:
		case UnaryOperatorPatternEditPart.VISUAL_ID:
		case BinaryOperatorPatternEditPart.VISUAL_ID:
		case PatternTimerEditPart.VISUAL_ID:
		case NotEditPart.VISUAL_ID:
		case LimitEditPart.VISUAL_ID:
		case Operator2EditPart.VISUAL_ID:
		case ValueOperator2EditPart.VISUAL_ID:
		case Aggregation3EditPart.VISUAL_ID:
		case Operator4EditPart.VISUAL_ID:
		case ValueOperator4EditPart.VISUAL_ID:
		case UnaryOperatorPattern3EditPart.VISUAL_ID:
		case BinaryOperatorPattern3EditPart.VISUAL_ID:
		case PatternTimer3EditPart.VISUAL_ID:
		case Not3EditPart.VISUAL_ID:
		case Aggregation4EditPart.VISUAL_ID:
		case Operator5EditPart.VISUAL_ID:
		case ValueOperator5EditPart.VISUAL_ID:
		case UnaryOperatorPattern4EditPart.VISUAL_ID:
		case BinaryOperatorPattern4EditPart.VISUAL_ID:
		case PatternTimer4EditPart.VISUAL_ID:
		case Not4EditPart.VISUAL_ID:
		case AttributeEditPart.VISUAL_ID:
		case Aggregation2EditPart.VISUAL_ID:
		case Operator3EditPart.VISUAL_ID:
		case ValueOperator3EditPart.VISUAL_ID:
		case UnaryOperatorPattern2EditPart.VISUAL_ID:
		case BinaryOperatorPattern2EditPart.VISUAL_ID:
		case PatternTimer2EditPart.VISUAL_ID:
		case Not2EditPart.VISUAL_ID:
			return true;
		default:
			break;
		}
		return false;
	}

	/**
	 * @generated
	 */
	public static final DiagramStructure TYPED_INSTANCE = new DiagramStructure() {
		/**
		 * @generated
		 */
		@Override
		public int getVisualID(View view) {
			return dsml.diagram.part.DsmlVisualIDRegistry.getVisualID(view);
		}

		/**
		 * @generated
		 */
		@Override
		public String getModelID(View view) {
			return dsml.diagram.part.DsmlVisualIDRegistry.getModelID(view);
		}

		/**
		 * @generated
		 */
		@Override
		public int getNodeVisualID(View containerView, EObject domainElement) {
			return dsml.diagram.part.DsmlVisualIDRegistry.getNodeVisualID(
					containerView, domainElement);
		}

		/**
		 * @generated
		 */
		@Override
		public boolean checkNodeVisualID(View containerView,
				EObject domainElement, int candidate) {
			return dsml.diagram.part.DsmlVisualIDRegistry.checkNodeVisualID(
					containerView, domainElement, candidate);
		}

		/**
		 * @generated
		 */
		@Override
		public boolean isCompartmentVisualID(int visualID) {
			return dsml.diagram.part.DsmlVisualIDRegistry
					.isCompartmentVisualID(visualID);
		}

		/**
		 * @generated
		 */
		@Override
		public boolean isSemanticLeafVisualID(int visualID) {
			return dsml.diagram.part.DsmlVisualIDRegistry
					.isSemanticLeafVisualID(visualID);
		}
	};

}
