/*
 * 
 */
package dsml.diagram.providers;

import java.util.HashSet;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.tooling.runtime.providers.DiagramElementTypeImages;
import org.eclipse.gmf.tooling.runtime.providers.DiagramElementTypes;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.Image;

import dsml.DsmlPackage;
import dsml.diagram.edit.parts.AggregationEditPart;
import dsml.diagram.edit.parts.AreaDesenhoEditPart;
import dsml.diagram.edit.parts.ArithmeticEditPart;
import dsml.diagram.edit.parts.AttributeEditPart;
import dsml.diagram.edit.parts.BinaryOperatorPatternEditPart;
import dsml.diagram.edit.parts.ComparisonEditPart;
import dsml.diagram.edit.parts.ConditionGroupEditPart;
import dsml.diagram.edit.parts.EventEditPart;
import dsml.diagram.edit.parts.EventPatternEditPart;
import dsml.diagram.edit.parts.FollowedbyEditPart;
import dsml.diagram.edit.parts.LimitEditPart;
import dsml.diagram.edit.parts.LinkComponentEditPart;
import dsml.diagram.edit.parts.LinkTargetEditPart;
import dsml.diagram.edit.parts.LogicalConnectorEditPart;
import dsml.diagram.edit.parts.Not2EditPart;
import dsml.diagram.edit.parts.NotEditPart;
import dsml.diagram.edit.parts.Operator2EditPart;
import dsml.diagram.edit.parts.OperatorEditPart;
import dsml.diagram.edit.parts.OrderEditPart;
import dsml.diagram.edit.parts.PatternTimerEditPart;
import dsml.diagram.edit.parts.RuleEditPart;
import dsml.diagram.edit.parts.Target2EditPart;
import dsml.diagram.edit.parts.TargetEditPart;
import dsml.diagram.edit.parts.UnaryOperatorPatternEditPart;
import dsml.diagram.edit.parts.ValueOperator2EditPart;
import dsml.diagram.edit.parts.ValueOperatorEditPart;
import dsml.diagram.edit.parts.WindowEditPart;
import dsml.diagram.part.DsmlDiagramEditorPlugin;

/**
 * @generated
 */
public class DsmlElementTypes {

	/**
	 * @generated
	 */
	private DsmlElementTypes() {
	}

	/**
	 * @generated
	 */
	private static Map<IElementType, ENamedElement> elements;

	/**
	 * @generated
	 */
	private static DiagramElementTypeImages elementTypeImages = new DiagramElementTypeImages(
			DsmlDiagramEditorPlugin.getInstance()
					.getItemProvidersAdapterFactory());

	/**
	 * @generated
	 */
	private static Set<IElementType> KNOWN_ELEMENT_TYPES;

	/**
	 * @generated
	 */
	public static final IElementType AreaDesenho_1000 = getElementType("br.ufpe.cin.dsml.cep.diagram.AreaDesenho_1000"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Event_2001 = getElementType("br.ufpe.cin.dsml.cep.diagram.Event_2001"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Rule_2002 = getElementType("br.ufpe.cin.dsml.cep.diagram.Rule_2002"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType EventPattern_2003 = getElementType("br.ufpe.cin.dsml.cep.diagram.EventPattern_2003"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Window_2004 = getElementType("br.ufpe.cin.dsml.cep.diagram.Window_2004"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Attribute_3001 = getElementType("br.ufpe.cin.dsml.cep.diagram.Attribute_3001"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Target_3048 = getElementType("br.ufpe.cin.dsml.cep.diagram.Target_3048"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Operator_3003 = getElementType("br.ufpe.cin.dsml.cep.diagram.Operator_3003"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType ValueOperator_3004 = getElementType("br.ufpe.cin.dsml.cep.diagram.ValueOperator_3004"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType ConditionGroup_3049 = getElementType("br.ufpe.cin.dsml.cep.diagram.ConditionGroup_3049"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Operator_3007 = getElementType("br.ufpe.cin.dsml.cep.diagram.Operator_3007"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType ValueOperator_3008 = getElementType("br.ufpe.cin.dsml.cep.diagram.ValueOperator_3008"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Not_3050 = getElementType("br.ufpe.cin.dsml.cep.diagram.Not_3050"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Aggregation_3051 = getElementType("br.ufpe.cin.dsml.cep.diagram.Aggregation_3051"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Order_3052 = getElementType("br.ufpe.cin.dsml.cep.diagram.Order_3052"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Limit_3020 = getElementType("br.ufpe.cin.dsml.cep.diagram.Limit_3020"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Target_3038 = getElementType("br.ufpe.cin.dsml.cep.diagram.Target_3038"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Not_3047 = getElementType("br.ufpe.cin.dsml.cep.diagram.Not_3047"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType UnaryOperatorPattern_3043 = getElementType("br.ufpe.cin.dsml.cep.diagram.UnaryOperatorPattern_3043"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType BinaryOperatorPattern_3044 = getElementType("br.ufpe.cin.dsml.cep.diagram.BinaryOperatorPattern_3044"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType PatternTimer_3045 = getElementType("br.ufpe.cin.dsml.cep.diagram.PatternTimer_3045"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType LinkComponent_4001 = getElementType("br.ufpe.cin.dsml.cep.diagram.LinkComponent_4001"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType LinkTarget_4002 = getElementType("br.ufpe.cin.dsml.cep.diagram.LinkTarget_4002"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Comparison_4003 = getElementType("br.ufpe.cin.dsml.cep.diagram.Comparison_4003"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Arithmetic_4004 = getElementType("br.ufpe.cin.dsml.cep.diagram.Arithmetic_4004"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType Followedby_4005 = getElementType("br.ufpe.cin.dsml.cep.diagram.Followedby_4005"); //$NON-NLS-1$
	/**
	 * @generated
	 */
	public static final IElementType LogicalConnector_4006 = getElementType("br.ufpe.cin.dsml.cep.diagram.LogicalConnector_4006"); //$NON-NLS-1$

	/**
	 * @generated
	 */
	public static ImageDescriptor getImageDescriptor(ENamedElement element) {
		return elementTypeImages.getImageDescriptor(element);
	}

	/**
	 * @generated
	 */
	public static Image getImage(ENamedElement element) {
		return elementTypeImages.getImage(element);
	}

	/**
	 * @generated
	 */
	public static ImageDescriptor getImageDescriptor(IAdaptable hint) {
		return getImageDescriptor(getElement(hint));
	}

	/**
	 * @generated
	 */
	public static Image getImage(IAdaptable hint) {
		return getImage(getElement(hint));
	}

	/**
	 * Returns 'type' of the ecore object associated with the hint.
	 * 
	 * @generated
	 */
	public static ENamedElement getElement(IAdaptable hint) {
		Object type = hint.getAdapter(IElementType.class);
		if (elements == null) {
			elements = new IdentityHashMap<IElementType, ENamedElement>();

			elements.put(AreaDesenho_1000,
					DsmlPackage.eINSTANCE.getAreaDesenho());

			elements.put(Event_2001, DsmlPackage.eINSTANCE.getEvent());

			elements.put(Rule_2002, DsmlPackage.eINSTANCE.getRule());

			elements.put(EventPattern_2003,
					DsmlPackage.eINSTANCE.getEventPattern());

			elements.put(Window_2004, DsmlPackage.eINSTANCE.getWindow());

			elements.put(Attribute_3001, DsmlPackage.eINSTANCE.getAttribute());

			elements.put(Target_3048, DsmlPackage.eINSTANCE.getTarget());

			elements.put(Operator_3003, DsmlPackage.eINSTANCE.getOperator());

			elements.put(ValueOperator_3004,
					DsmlPackage.eINSTANCE.getValueOperator());

			elements.put(ConditionGroup_3049,
					DsmlPackage.eINSTANCE.getConditionGroup());

			elements.put(Operator_3007, DsmlPackage.eINSTANCE.getOperator());

			elements.put(ValueOperator_3008,
					DsmlPackage.eINSTANCE.getValueOperator());

			elements.put(Not_3050, DsmlPackage.eINSTANCE.getNot());

			elements.put(Aggregation_3051,
					DsmlPackage.eINSTANCE.getAggregation());

			elements.put(Order_3052, DsmlPackage.eINSTANCE.getOrder());

			elements.put(Limit_3020, DsmlPackage.eINSTANCE.getLimit());

			elements.put(Target_3038, DsmlPackage.eINSTANCE.getTarget());

			elements.put(Not_3047, DsmlPackage.eINSTANCE.getNot());

			elements.put(UnaryOperatorPattern_3043,
					DsmlPackage.eINSTANCE.getUnaryOperatorPattern());

			elements.put(BinaryOperatorPattern_3044,
					DsmlPackage.eINSTANCE.getBinaryOperatorPattern());

			elements.put(PatternTimer_3045,
					DsmlPackage.eINSTANCE.getPatternTimer());

			elements.put(LinkComponent_4001,
					DsmlPackage.eINSTANCE.getLinkComponent());

			elements.put(LinkTarget_4002, DsmlPackage.eINSTANCE.getLinkTarget());

			elements.put(Comparison_4003, DsmlPackage.eINSTANCE.getComparison());

			elements.put(Arithmetic_4004, DsmlPackage.eINSTANCE.getArithmetic());

			elements.put(Followedby_4005, DsmlPackage.eINSTANCE.getFollowedby());

			elements.put(LogicalConnector_4006,
					DsmlPackage.eINSTANCE.getLogicalConnector());
		}
		return (ENamedElement) elements.get(type);
	}

	/**
	 * @generated
	 */
	private static IElementType getElementType(String id) {
		return ElementTypeRegistry.getInstance().getType(id);
	}

	/**
	 * @generated
	 */
	public static boolean isKnownElementType(IElementType elementType) {
		if (KNOWN_ELEMENT_TYPES == null) {
			KNOWN_ELEMENT_TYPES = new HashSet<IElementType>();
			KNOWN_ELEMENT_TYPES.add(AreaDesenho_1000);
			KNOWN_ELEMENT_TYPES.add(Event_2001);
			KNOWN_ELEMENT_TYPES.add(Rule_2002);
			KNOWN_ELEMENT_TYPES.add(EventPattern_2003);
			KNOWN_ELEMENT_TYPES.add(Window_2004);
			KNOWN_ELEMENT_TYPES.add(Attribute_3001);
			KNOWN_ELEMENT_TYPES.add(Target_3048);
			KNOWN_ELEMENT_TYPES.add(Operator_3003);
			KNOWN_ELEMENT_TYPES.add(ValueOperator_3004);
			KNOWN_ELEMENT_TYPES.add(ConditionGroup_3049);
			KNOWN_ELEMENT_TYPES.add(Operator_3007);
			KNOWN_ELEMENT_TYPES.add(ValueOperator_3008);
			KNOWN_ELEMENT_TYPES.add(Not_3050);
			KNOWN_ELEMENT_TYPES.add(Aggregation_3051);
			KNOWN_ELEMENT_TYPES.add(Order_3052);
			KNOWN_ELEMENT_TYPES.add(Limit_3020);
			KNOWN_ELEMENT_TYPES.add(Target_3038);
			KNOWN_ELEMENT_TYPES.add(Not_3047);
			KNOWN_ELEMENT_TYPES.add(UnaryOperatorPattern_3043);
			KNOWN_ELEMENT_TYPES.add(BinaryOperatorPattern_3044);
			KNOWN_ELEMENT_TYPES.add(PatternTimer_3045);
			KNOWN_ELEMENT_TYPES.add(LinkComponent_4001);
			KNOWN_ELEMENT_TYPES.add(LinkTarget_4002);
			KNOWN_ELEMENT_TYPES.add(Comparison_4003);
			KNOWN_ELEMENT_TYPES.add(Arithmetic_4004);
			KNOWN_ELEMENT_TYPES.add(Followedby_4005);
			KNOWN_ELEMENT_TYPES.add(LogicalConnector_4006);
		}
		return KNOWN_ELEMENT_TYPES.contains(elementType);
	}

	/**
	 * @generated
	 */
	public static IElementType getElementType(int visualID) {
		switch (visualID) {
		case AreaDesenhoEditPart.VISUAL_ID:
			return AreaDesenho_1000;
		case EventEditPart.VISUAL_ID:
			return Event_2001;
		case RuleEditPart.VISUAL_ID:
			return Rule_2002;
		case EventPatternEditPart.VISUAL_ID:
			return EventPattern_2003;
		case WindowEditPart.VISUAL_ID:
			return Window_2004;
		case AttributeEditPart.VISUAL_ID:
			return Attribute_3001;
		case TargetEditPart.VISUAL_ID:
			return Target_3048;
		case OperatorEditPart.VISUAL_ID:
			return Operator_3003;
		case ValueOperatorEditPart.VISUAL_ID:
			return ValueOperator_3004;
		case ConditionGroupEditPart.VISUAL_ID:
			return ConditionGroup_3049;
		case Operator2EditPart.VISUAL_ID:
			return Operator_3007;
		case ValueOperator2EditPart.VISUAL_ID:
			return ValueOperator_3008;
		case NotEditPart.VISUAL_ID:
			return Not_3050;
		case AggregationEditPart.VISUAL_ID:
			return Aggregation_3051;
		case OrderEditPart.VISUAL_ID:
			return Order_3052;
		case LimitEditPart.VISUAL_ID:
			return Limit_3020;
		case Target2EditPart.VISUAL_ID:
			return Target_3038;
		case Not2EditPart.VISUAL_ID:
			return Not_3047;
		case UnaryOperatorPatternEditPart.VISUAL_ID:
			return UnaryOperatorPattern_3043;
		case BinaryOperatorPatternEditPart.VISUAL_ID:
			return BinaryOperatorPattern_3044;
		case PatternTimerEditPart.VISUAL_ID:
			return PatternTimer_3045;
		case LinkComponentEditPart.VISUAL_ID:
			return LinkComponent_4001;
		case LinkTargetEditPart.VISUAL_ID:
			return LinkTarget_4002;
		case ComparisonEditPart.VISUAL_ID:
			return Comparison_4003;
		case ArithmeticEditPart.VISUAL_ID:
			return Arithmetic_4004;
		case FollowedbyEditPart.VISUAL_ID:
			return Followedby_4005;
		case LogicalConnectorEditPart.VISUAL_ID:
			return LogicalConnector_4006;
		}
		return null;
	}

	/**
	 * @generated
	 */
	public static final DiagramElementTypes TYPED_INSTANCE = new DiagramElementTypes(
			elementTypeImages) {

		/**
		 * @generated
		 */
		@Override
		public boolean isKnownElementType(IElementType elementType) {
			return dsml.diagram.providers.DsmlElementTypes
					.isKnownElementType(elementType);
		}

		/**
		 * @generated
		 */
		@Override
		public IElementType getElementTypeForVisualId(int visualID) {
			return dsml.diagram.providers.DsmlElementTypes
					.getElementType(visualID);
		}

		/**
		 * @generated
		 */
		@Override
		public ENamedElement getDefiningNamedElement(
				IAdaptable elementTypeAdapter) {
			return dsml.diagram.providers.DsmlElementTypes
					.getElement(elementTypeAdapter);
		}
	};

}
