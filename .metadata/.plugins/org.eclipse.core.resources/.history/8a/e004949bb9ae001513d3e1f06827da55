/*
 * 
 */
package dsml.diagram.providers.assistants;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import dsml.diagram.edit.parts.BringGroupEditPart;
import dsml.diagram.edit.parts.ConditionGroupEditPart;
import dsml.diagram.edit.parts.Target2EditPart;
import dsml.diagram.edit.parts.TargetEditPart;
import dsml.diagram.providers.DsmlElementTypes;
import dsml.diagram.providers.DsmlModelingAssistantProvider;

/**
 * @generated
 */
public class DsmlModelingAssistantProviderOfBringGroupEditPart extends
		DsmlModelingAssistantProvider {

	/**
	 * @generated
	 */
	@Override
	public List<IElementType> getRelTypesOnSource(IAdaptable source) {
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source
				.getAdapter(IGraphicalEditPart.class);
		return doGetRelTypesOnSource((BringGroupEditPart) sourceEditPart);
	}

	/**
	 * @generated
	 */
	public List<IElementType> doGetRelTypesOnSource(BringGroupEditPart source) {
		List<IElementType> types = new ArrayList<IElementType>(3);
		types.add(DsmlElementTypes.Comparison_4003);
		types.add(DsmlElementTypes.Arithmetic_4004);
		types.add(DsmlElementTypes.LogicalConnector_4006);
		return types;
	}

	/**
	 * @generated
	 */
	@Override
	public List<IElementType> getRelTypesOnSourceAndTarget(IAdaptable source,
			IAdaptable target) {
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source
				.getAdapter(IGraphicalEditPart.class);
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target
				.getAdapter(IGraphicalEditPart.class);
		return doGetRelTypesOnSourceAndTarget(
				(BringGroupEditPart) sourceEditPart, targetEditPart);
	}

	/**
	 * @generated
	 */
	public List<IElementType> doGetRelTypesOnSourceAndTarget(
			BringGroupEditPart source, IGraphicalEditPart targetEditPart) {
		List<IElementType> types = new LinkedList<IElementType>();
		if (targetEditPart instanceof TargetEditPart) {
			types.add(DsmlElementTypes.Comparison_4003);
		}
		if (targetEditPart instanceof ConditionGroupEditPart) {
			types.add(DsmlElementTypes.Comparison_4003);
		}
		if (targetEditPart instanceof BringGroupEditPart) {
			types.add(DsmlElementTypes.Comparison_4003);
		}
		if (targetEditPart instanceof Target2EditPart) {
			types.add(DsmlElementTypes.Comparison_4003);
		}
		if (targetEditPart instanceof TargetEditPart) {
			types.add(DsmlElementTypes.Arithmetic_4004);
		}
		if (targetEditPart instanceof ConditionGroupEditPart) {
			types.add(DsmlElementTypes.Arithmetic_4004);
		}
		if (targetEditPart instanceof BringGroupEditPart) {
			types.add(DsmlElementTypes.Arithmetic_4004);
		}
		if (targetEditPart instanceof Target2EditPart) {
			types.add(DsmlElementTypes.Arithmetic_4004);
		}
		if (targetEditPart instanceof TargetEditPart) {
			types.add(DsmlElementTypes.LogicalConnector_4006);
		}
		if (targetEditPart instanceof ConditionGroupEditPart) {
			types.add(DsmlElementTypes.LogicalConnector_4006);
		}
		if (targetEditPart instanceof BringGroupEditPart) {
			types.add(DsmlElementTypes.LogicalConnector_4006);
		}
		if (targetEditPart instanceof Target2EditPart) {
			types.add(DsmlElementTypes.LogicalConnector_4006);
		}
		return types;
	}

	/**
	 * @generated
	 */
	@Override
	public List<IElementType> getTypesForTarget(IAdaptable source,
			IElementType relationshipType) {
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source
				.getAdapter(IGraphicalEditPart.class);
		return doGetTypesForTarget((BringGroupEditPart) sourceEditPart,
				relationshipType);
	}

	/**
	 * @generated
	 */
	public List<IElementType> doGetTypesForTarget(BringGroupEditPart source,
			IElementType relationshipType) {
		List<IElementType> types = new ArrayList<IElementType>();
		if (relationshipType == DsmlElementTypes.Comparison_4003) {
			types.add(DsmlElementTypes.Target_3002);
			types.add(DsmlElementTypes.ConditionGroup_3005);
			types.add(DsmlElementTypes.BringGroup_3008);
			types.add(DsmlElementTypes.Target_3017);
		} else if (relationshipType == DsmlElementTypes.Arithmetic_4004) {
			types.add(DsmlElementTypes.Target_3002);
			types.add(DsmlElementTypes.ConditionGroup_3005);
			types.add(DsmlElementTypes.BringGroup_3008);
			types.add(DsmlElementTypes.Target_3017);
		} else if (relationshipType == DsmlElementTypes.LogicalConnector_4006) {
			types.add(DsmlElementTypes.Target_3002);
			types.add(DsmlElementTypes.ConditionGroup_3005);
			types.add(DsmlElementTypes.BringGroup_3008);
			types.add(DsmlElementTypes.Target_3017);
		}
		return types;
	}

	/**
	 * @generated
	 */
	@Override
	public List<IElementType> getRelTypesOnTarget(IAdaptable target) {
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target
				.getAdapter(IGraphicalEditPart.class);
		return doGetRelTypesOnTarget((BringGroupEditPart) targetEditPart);
	}

	/**
	 * @generated
	 */
	public List<IElementType> doGetRelTypesOnTarget(BringGroupEditPart target) {
		List<IElementType> types = new ArrayList<IElementType>(3);
		types.add(DsmlElementTypes.Comparison_4003);
		types.add(DsmlElementTypes.Arithmetic_4004);
		types.add(DsmlElementTypes.LogicalConnector_4006);
		return types;
	}

	/**
	 * @generated
	 */
	@Override
	public List<IElementType> getTypesForSource(IAdaptable target,
			IElementType relationshipType) {
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target
				.getAdapter(IGraphicalEditPart.class);
		return doGetTypesForSource((BringGroupEditPart) targetEditPart,
				relationshipType);
	}

	/**
	 * @generated
	 */
	public List<IElementType> doGetTypesForSource(BringGroupEditPart target,
			IElementType relationshipType) {
		List<IElementType> types = new ArrayList<IElementType>();
		if (relationshipType == DsmlElementTypes.Comparison_4003) {
			types.add(DsmlElementTypes.Target_3002);
			types.add(DsmlElementTypes.ConditionGroup_3005);
			types.add(DsmlElementTypes.BringGroup_3008);
			types.add(DsmlElementTypes.Target_3017);
		} else if (relationshipType == DsmlElementTypes.Arithmetic_4004) {
			types.add(DsmlElementTypes.Target_3002);
			types.add(DsmlElementTypes.ConditionGroup_3005);
			types.add(DsmlElementTypes.BringGroup_3008);
			types.add(DsmlElementTypes.Target_3017);
		} else if (relationshipType == DsmlElementTypes.LogicalConnector_4006) {
			types.add(DsmlElementTypes.Target_3002);
			types.add(DsmlElementTypes.ConditionGroup_3005);
			types.add(DsmlElementTypes.BringGroup_3008);
			types.add(DsmlElementTypes.Target_3017);
		}
		return types;
	}

}
