/**
 */
package dsml.impl;

import dsml.DsmlPackage;
import dsml.Node;
import dsml.Not;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Not</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link dsml.impl.NotImpl#getConditionGroup <em>Condition Group</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class NotImpl extends NodeImpl implements Not {
	/**
	 * The default value of the '{@link #getConditionGroup() <em>Condition Group</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getConditionGroup()
	 * @generated
	 * @ordered
	 */
	protected static final String CONDITION_GROUP_EDEFAULT = "ConditionGroup";

	/**
	 * The cached value of the '{@link #getConditionGroup() <em>Condition Group</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getConditionGroup()
	 * @generated
	 * @ordered
	 */
	protected String conditionGroup = CONDITION_GROUP_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return DsmlPackage.Literals.NOT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getConditionGroup() {
		return conditionGroup;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case DsmlPackage.NOT__CONDITION_GROUP:
				return getConditionGroup();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case DsmlPackage.NOT__CONDITION_GROUP:
				return CONDITION_GROUP_EDEFAULT == null ? conditionGroup != null : !CONDITION_GROUP_EDEFAULT.equals(conditionGroup);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (conditionGroup: ");
		result.append(conditionGroup);
		result.append(')');
		return result.toString();
	}

} //NotImpl
