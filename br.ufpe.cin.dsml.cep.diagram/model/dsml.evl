context Event {
	constraint EventHasName {
		check : self.eventName.isDefined()	
		message : self.eclass().name +	' without name not allowed.'
		
	}
	
	constraint NameIsValid {
		guard : self.satisfies('EventHasName')
		check : not(("#")->isSubstringOf(self.eventName))
		message : 'The character "#" can not be used in the Event names.'
	}
	
	constraint AtLeastOneAttribute{
		guard : self.satisfies('EventHasName')
		check {
			if(self.attributes->size() = 0){
				return false;
			}
		return true; 
		}
		message : 'Uma Evento deve ter ao menos um atributo'
	}
}

context Rule {
	
	constraint NotEmpty {
		check {
		
			if(self.queries->size()=0){
				return false;
			}
	
		return true; 
		}
		message : 'One rule dont should isEmpty'	
		
	}
	
	constraint AtLeastOneBringGroup {
	    guard : self.satisfies('NotEmpty')
		check {
		for(q:Query in self.queries)
			if(q.isTypeOf(BringGroup)){
				return true;
			}
	
		return false; 
		}
		message : 'One rule should have atleast one bring group'
	}
	
	constraint AtLeastOneTargetGroup {
		check {
		for(q:Query in self.queries)
			if(q.isTypeOf(Target)){
				return true;
			}
	
		return false; 
		}
		message : 'One rule should have atleast one Target'
	}
	
}

context Window {

	constraint AtLeastOneValue{
		check {
			if(self.value = null or self.value = ''){
				return false;
			}
		return true; 
		}
		message : 'One Window should have atleast one value'
	}
}

context BringGroup {

	constraint AtLeastOneAttributeOrBringAll{
		check {
			if(self.operationTypes->size() = 0 and self.bringAll = false){
				return false;
			}
		return true; 
		}
		message : 'One BringGroup should have atleast one operador ou bringAll = true'
	}
}

context Attribute {

	constraint AtLeastOneNameAndType{
		check {
			if((self.name = null or self.name = '') or (self.type = null or self.type = '' )){
				return false;
			}
		return true; 
		}
		message : 'One Attribute should have atleast one name and type'
	}
	
}

context TargetGroupby {
	constraint AtLeastOneAttributeOperator{
		check {
			if(self.attributes->size() = 0){
				return false;
			}
		return true; 
		}
		message : 'One TargetGroupby should have atleast one attribut'
	}
	
}

context GroupbyCondition {
	constraint AtLeastOneAttributeOperator{
		check {
			if(self.attributes->size() = 0){
				return false;
			}
		return true; 
		}
		message : 'One GroupbyCondition should have atleast one attribut'
	}
	
}

context EventOutput {
	constraint AtLeastOneTargetGroup {
		check {
		for(q:Query in self.queries)
			if(q.isTypeOf(Target)){
				return true;
			}
	
		return false; 
		}
		message : 'One rule should have atleast one Target'
	}
	
}

context ConditionGroup {

	constraint AtLeastOneAttributeOrBringAll{
		check {
			if(self.operationTypes->size() = 0){
				return false;
			}
		return true; 
		}
		message : 'One ConditionGroup should have atleast one operador'
	}
}

context ValueOperator {

	constraint AtLeastOneValue{
		check {

			if(self.valueOperator = null or self.valueOperator = ''){
				return false;
			}
		return true; 
		}
		message : 'One ValueOperator should have atleast one value'
	}
}

context Operator {
	constraint AtLeastOneAttributeOperator{
		check {
			if(self.attribute = null){
				return false;
			}
		return true; 
		}
		message : 'Uma operador deve ter ao menos um attributo'
	}
	
}

context Aggregation {
	constraint AtLeastOneAttributeOperator{
		check {
			if(self.attribute = null){
				return false;
			}
		return true; 
		}
		message : 'One Aggregation should have atleast one attribut'
	}
	
}

context EventPattern {
	constraint AtLeastOneTargetGroup {
		check {
		for(q:Pattern in self.node)
			if(q.isTypeOf(Target)){
				return true;
			}
	
		return false; 
		}
		message : 'One rule should have atleast one Target ' + self.node
	}
	
}