/**
 */
package dsml.provider;

import dsml.util.DsmlAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DsmlItemProviderAdapterFactory extends DsmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DsmlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.DrawingArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DrawingAreaItemProvider drawingAreaItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.DrawingArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDrawingAreaAdapter() {
		if (drawingAreaItemProvider == null) {
			drawingAreaItemProvider = new DrawingAreaItemProvider(this);
		}

		return drawingAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.EventOutput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventOutputItemProvider eventOutputItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.EventOutput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventOutputAdapter() {
		if (eventOutputItemProvider == null) {
			eventOutputItemProvider = new EventOutputItemProvider(this);
		}

		return eventOutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.EventPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventPatternItemProvider eventPatternItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.EventPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventPatternAdapter() {
		if (eventPatternItemProvider == null) {
			eventPatternItemProvider = new EventPatternItemProvider(this);
		}

		return eventPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Window} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WindowItemProvider windowItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Window}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWindowAdapter() {
		if (windowItemProvider == null) {
			windowItemProvider = new WindowItemProvider(this);
		}

		return windowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.TargetGroupby} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetGroupbyItemProvider targetGroupbyItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.TargetGroupby}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetGroupbyAdapter() {
		if (targetGroupbyItemProvider == null) {
			targetGroupbyItemProvider = new TargetGroupbyItemProvider(this);
		}

		return targetGroupbyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Aggregation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregationItemProvider aggregationItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Aggregation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregationAdapter() {
		if (aggregationItemProvider == null) {
			aggregationItemProvider = new AggregationItemProvider(this);
		}

		return aggregationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.ConditionGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionGroupItemProvider conditionGroupItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.ConditionGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionGroupAdapter() {
		if (conditionGroupItemProvider == null) {
			conditionGroupItemProvider = new ConditionGroupItemProvider(this);
		}

		return conditionGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.GroupbyCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupbyConditionItemProvider groupbyConditionItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.GroupbyCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupbyConditionAdapter() {
		if (groupbyConditionItemProvider == null) {
			groupbyConditionItemProvider = new GroupbyConditionItemProvider(this);
		}

		return groupbyConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.BringGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BringGroupItemProvider bringGroupItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.BringGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBringGroupAdapter() {
		if (bringGroupItemProvider == null) {
			bringGroupItemProvider = new BringGroupItemProvider(this);
		}

		return bringGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Target} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetItemProvider targetItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Target}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetAdapter() {
		if (targetItemProvider == null) {
			targetItemProvider = new TargetItemProvider(this);
		}

		return targetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Not} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotItemProvider notItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Not}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotAdapter() {
		if (notItemProvider == null) {
			notItemProvider = new NotItemProvider(this);
		}

		return notItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Operator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorItemProvider operatorItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Operator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatorAdapter() {
		if (operatorItemProvider == null) {
			operatorItemProvider = new OperatorItemProvider(this);
		}

		return operatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.ValueOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueOperatorItemProvider valueOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.ValueOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueOperatorAdapter() {
		if (valueOperatorItemProvider == null) {
			valueOperatorItemProvider = new ValueOperatorItemProvider(this);
		}

		return valueOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.UnaryPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryPatternItemProvider unaryPatternItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.UnaryPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryPatternAdapter() {
		if (unaryPatternItemProvider == null) {
			unaryPatternItemProvider = new UnaryPatternItemProvider(this);
		}

		return unaryPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.PatternTimer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternTimerItemProvider patternTimerItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.PatternTimer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternTimerAdapter() {
		if (patternTimerItemProvider == null) {
			patternTimerItemProvider = new PatternTimerItemProvider(this);
		}

		return patternTimerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.RepeatPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatPatternItemProvider repeatPatternItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.RepeatPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatPatternAdapter() {
		if (repeatPatternItemProvider == null) {
			repeatPatternItemProvider = new RepeatPatternItemProvider(this);
		}

		return repeatPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.LinkTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkTargetItemProvider linkTargetItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.LinkTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkTargetAdapter() {
		if (linkTargetItemProvider == null) {
			linkTargetItemProvider = new LinkTargetItemProvider(this);
		}

		return linkTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.LinkPatternTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkPatternTargetItemProvider linkPatternTargetItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.LinkPatternTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkPatternTargetAdapter() {
		if (linkPatternTargetItemProvider == null) {
			linkPatternTargetItemProvider = new LinkPatternTargetItemProvider(this);
		}

		return linkPatternTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Comparison} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComparisonItemProvider comparisonItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Comparison}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComparisonAdapter() {
		if (comparisonItemProvider == null) {
			comparisonItemProvider = new ComparisonItemProvider(this);
		}

		return comparisonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.Arithmetic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithmeticItemProvider arithmeticItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.Arithmetic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithmeticAdapter() {
		if (arithmeticItemProvider == null) {
			arithmeticItemProvider = new ArithmeticItemProvider(this);
		}

		return arithmeticItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsml.LogicalConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalConnectorItemProvider logicalConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link dsml.LogicalConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalConnectorAdapter() {
		if (logicalConnectorItemProvider == null) {
			logicalConnectorItemProvider = new LogicalConnectorItemProvider(this);
		}

		return logicalConnectorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (drawingAreaItemProvider != null) drawingAreaItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (eventOutputItemProvider != null) eventOutputItemProvider.dispose();
		if (eventPatternItemProvider != null) eventPatternItemProvider.dispose();
		if (windowItemProvider != null) windowItemProvider.dispose();
		if (targetGroupbyItemProvider != null) targetGroupbyItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (aggregationItemProvider != null) aggregationItemProvider.dispose();
		if (conditionGroupItemProvider != null) conditionGroupItemProvider.dispose();
		if (groupbyConditionItemProvider != null) groupbyConditionItemProvider.dispose();
		if (bringGroupItemProvider != null) bringGroupItemProvider.dispose();
		if (targetItemProvider != null) targetItemProvider.dispose();
		if (notItemProvider != null) notItemProvider.dispose();
		if (operatorItemProvider != null) operatorItemProvider.dispose();
		if (valueOperatorItemProvider != null) valueOperatorItemProvider.dispose();
		if (unaryPatternItemProvider != null) unaryPatternItemProvider.dispose();
		if (patternTimerItemProvider != null) patternTimerItemProvider.dispose();
		if (repeatPatternItemProvider != null) repeatPatternItemProvider.dispose();
		if (linkTargetItemProvider != null) linkTargetItemProvider.dispose();
		if (linkPatternTargetItemProvider != null) linkPatternTargetItemProvider.dispose();
		if (comparisonItemProvider != null) comparisonItemProvider.dispose();
		if (arithmeticItemProvider != null) arithmeticItemProvider.dispose();
		if (logicalConnectorItemProvider != null) logicalConnectorItemProvider.dispose();
	}

}
